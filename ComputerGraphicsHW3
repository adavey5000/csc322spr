NOTE: The visualization is small, and you can see it better when you zoom in. I believe it is so small because of the limited number of (x,y) inputs which make the function equal close to zero. 
If only the points which made the function equal exactly zero were plotted, there would be almost nothing or nothing there.

CODE:

// Import THREE
import * as THREE from 'https://threejsfundamentals.org/threejs/resources/threejs/r132/build/three.module.js';
// Import OrbitControls
import { OrbitControls } from
'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

// Create renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Create camera
const camera = new THREE.PerspectiveCamera(45, window.innerWidth /
window.innerHeight, 1, 500);
camera.position.set(0, 0, 100);

// Create OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true; // Adds smooth motion
controls.dampingFactor = 0.05;
controls.screenSpacePanning = false;
controls.minDistance = 10;
controls.maxDistance = 200;

// Create scene
const scene = new THREE.Scene();

// Create a circle
const circleMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 });
const circlePoints = [];
const radius = 25; // Circle radius
const segments = 100; // Number of segments to approximate the circle
for (let i = 0; i <= segments; i++) {
const theta = (i / segments) * 2 * Math.PI;
const x = radius * Math.cos(theta);
const y = radius * Math.sin(theta);
circlePoints.push(new THREE.Vector3(x, y, 0));
}
const circleGeometry = new THREE.BufferGeometry().setFromPoints(circlePoints);
const circle = new THREE.Line(circleGeometry, circleMaterial);
scene.add(circle);

//create equation object to visualize
const limit = 10; //limit of values for point
const equationMaterial = new THREE.LineBasicMaterial({ color: 0xffff000 });
const equationPoints = [];

//loops for every combination of points
for (let i = -limit; i <=limit; i+=0.1) {
	for (let j = -limit; j<=limit; j+=0.1)
  {
   let z = findPoints(i, j); //call function
   if (Math.abs(z) < 0.1) { //ensure the function is close to 0 before plotting - it wont be perfect
   	equationPoints.push(new THREE.Vector3(i, j, 0));
   }
  }
}
const equationGeometry = new THREE.BufferGeometry().setFromPoints(equationPoints);
const equation = new THREE.Line(equationGeometry, equationMaterial);
scene.add(equation);


//determine function value based on x and y input
function findPoints(x,y) {
return Math.pow((x*x+y*y), 2) - 4*(x*x-y*y);
}

// Animation loop for rendering and controls update
function animate() {
requestAnimationFrame(animate);
controls.update(); // Required for damping to work
renderer.render(scene, camera);
}
// Start the animation loop
animate();
